"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TIDALPlugin = void 0;
const erela_js_1 = require("erela.js");
const axios_1 = __importDefault(require("axios"));
const USER_AGENT = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.84 Safari/537.36 OPR/85.0.4341.68';
const MAIN_URL = 'https://listen.tidal.com';
const API_URL = 'https://api.tidal.com/v1';
const URL_REGEX = /^http(?:s|):\/\/(?:listen\.|www\.|)tidal\.com\/(?:browse\/|)(track|album|playlist)\/([a-zA-Z0-9-_]+)/;
const SCRIPT_REGEX = /src="\/app\.([a-zA-Z0-9-_]+)\.js"/;
const TOKEN_REGEX = /(?:[a-zA-Z0-9-_]{2})\(\)\?"(?:[a-zA-Z0-9-_]+)"\:"([a-zA-Z0-9-_]+)"/;
function check(options) {
    if (typeof options !== 'undefined' &&
        typeof options !== 'object')
        throw new TypeError('TIDALPlugin#options options must be an object.');
    if (typeof options !== 'undefined') {
        if (typeof options.convertUnresolved !== 'undefined' &&
            typeof options.convertUnresolved !== 'boolean')
            throw new TypeError('TIDALPlugin#options convertUnresolved must be a boolean.');
        if (typeof options.countryCode !== 'undefined' &&
            typeof options.countryCode !== 'string')
            throw new TypeError('TIDALPlugin#options countryCode must be a string.');
    }
}
function convertToQuery(track) {
    return {
        title: track.title,
        author: track.artist.name,
        duration: track.duration * 1000
    };
}
function buildSearch(loadType, tracks, error, name) {
    return {
        loadType: loadType,
        tracks: tracks ?? [],
        playlist: name ? {
            name,
            duration: tracks
                .reduce((acc, cur) => acc + (cur.duration || 0), 0),
        } : null,
        exception: error ? {
            message: error,
            severity: 'COMMON',
        } : null,
    };
}
class TIDALPlugin extends erela_js_1.Plugin {
    options;
    functions;
    _search;
    manager;
    token;
    constructor(options) {
        super();
        check(options);
        this.options = { ...options };
        this.functions = {
            track: this.getTrack.bind(this),
            album: this.getAlbum.bind(this),
            playlist: this.getPlaylist.bind(this)
        };
    }
    async load(manager) {
        this.manager = manager;
        this._search = this.manager.search.bind(manager);
        this.manager.search = this.search.bind(this);
        await this.fetchToken();
    }
    async search(query, requester) {
        const finalQuery = query.query || query;
        const [, type, id] = URL_REGEX.exec(finalQuery) ?? [];
        if (this.functions[type]) {
            try {
                const func = this.functions[type];
                if (func) {
                    const data = await func(id);
                    const loadType = type === 'track' ? 'TRACK_LOADED' : 'PLAYLIST_LOADED';
                    const name = ['playlist', 'album'].includes(type) ? data.name : null;
                    const tracks = data.tracks.map((query) => erela_js_1.TrackUtils.buildUnresolved(query, requester));
                    if (this.options.convertUnresolved)
                        await Promise.all(tracks.map((track) => track.resolve()));
                    return buildSearch(loadType, tracks, null, name);
                }
                return buildSearch('LOAD_FAILED', null, 'Invalid TIDAL url.', null);
            }
            catch (e) {
                return buildSearch(e.loadType ?? 'LOAD_FAILED', null, e.message ?? null, null);
            }
        }
        return this._search(query, requester);
    }
    async fetchToken() {
        return axios_1.default.get(MAIN_URL, {
            responseType: 'text',
            headers: { 'User-Agent': USER_AGENT }
        }).then((mainPage) => {
            if (mainPage.status !== 200)
                throw RangeError('TIDALPlugin#fetchToken failed to fetch token. Main TIDAL page didn\'t return a 200 (OK) status code.');
            const scriptResult = SCRIPT_REGEX.exec(mainPage.data);
            if (!scriptResult || !scriptResult[1])
                throw RangeError('TIDALPlugin#fetchToken failed to fetch token. Script id not found on main TIDAL page.');
            return axios_1.default.get(MAIN_URL + `/app.${scriptResult[1]}.js`, {
                responseType: 'text',
                headers: { 'User-Agent': USER_AGENT }
            }).then((scriptPage) => {
                if (scriptPage.status !== 200)
                    throw RangeError('TIDALPlugin#fetchToken failed to fetch token. Script page didn\'t return a 200 (OK) status code.');
                const tokenResult = TOKEN_REGEX.exec(scriptPage.data);
                if (!tokenResult || !tokenResult[1])
                    throw RangeError('TIDALPlugin#fetchToken failed to fetch token. Token not found on script page.');
                this.token = tokenResult[1];
                return true;
            });
        });
    }
    async getAlbum(id) {
        const album = await this.makeRequest(`/albums/${id}`);
        const tracks = await this.makeRequest(`/albums/${id}/tracks`);
        return { tracks: tracks.items.map((item) => convertToQuery(item)), name: album.title };
    }
    async getPlaylist(id) {
        const album = await this.makeRequest(`/playlists/${id}`);
        const tracks = await this.makeRequest(`/playlists/${id}/tracks`);
        return { tracks: tracks.items.map((item) => convertToQuery(item)), name: album.title };
    }
    async getTrack(id) {
        const raw = await this.makeRequest(`/tracks/${id}`);
        const track = convertToQuery(raw);
        return { tracks: [track] };
    }
    async makeRequest(path) {
        if (!this.token)
            await this.fetchToken();
        return axios_1.default.get(API_URL + path, {
            headers: {
                'x-tidal-token': this.token,
                'User-Agent': USER_AGENT,
                Accept: 'application/json'
            },
            params: {
                countryCode: this.options.countryCode || 'US'
            },
            responseType: 'json'
        }).then(async (apiResponse) => {
            if (apiResponse.status === 401) {
                await this.fetchToken();
                return this.makeRequest(path);
            }
            if (apiResponse.status !== 200)
                throw new RangeError('TIDALPlugin#makeRequest TIDAL api didn\'t return 200 (OK) as status code.');
            return apiResponse.data;
        });
    }
}
exports.TIDALPlugin = TIDALPlugin;
