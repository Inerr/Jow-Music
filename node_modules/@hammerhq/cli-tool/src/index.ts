import cla, { OptionDefinition } from "command-line-args";
import "colors";

const [name, ...argv] = process.argv.slice(2);

export interface ICommand {
	name: string;
	usage: string;
	example: string[];
	category: string;
	aliases: string[];
	description: string;
	options: OptionDefinition[];
}

export interface AnyObject {
	[key: string]: any;
}

export interface HelpCategory {
	[key: string]: ICommand[];
}

export type CLIToolFunction = (args: AnyObject) => any;

class CLITool {
	private commands: ICommand[] = [];
	private commandExecuted = false;

	private handleHelp(command: ICommand): CLITool {
		console.info(
			`\t${command.name.blue} - Help:\n\t` +
				`${"-".repeat(command.name.length + 9)}\n\t` +
				`${"Command Name".green}: ${command.name.yellow}\n\t` +
				`${"Usage".green}: ${command.name.yellow} ${
					command.usage.yellow
				}\n\t` +
				`${"Aliases".green}: ${command.aliases
					.map((alias) => alias.yellow)
					.join(", ")}\n\t` +
				`${"Category".green}: ${command.category.yellow}\n\t` +
				`${"Description".green}: ${command.description.yellow}\n\t` +
				`${"Example".green}:\n\t` +
				`\t${command.example
					.map((example) => `${command.name.blue} ${example.yellow}`)
					.join("\n\t\t")}`,
		);
		return this;
	}

	public createCommand(command: ICommand, fn: CLIToolFunction): CLITool {
		command.example.unshift("--help");
		this.commands.push(command);

		command.options.push({
			name: "help",
			alias: "h",
			type: Boolean,
		});

		if (command.name !== name && !command.aliases.includes(name as string))
			return this;

		if (this.commandExecuted) return this;
		this.commandExecuted = true;

		const args = cla(command.options, {
			argv,
		});

		if (args.help) return this.handleHelp(command);

		fn(args);

		return this;
	}

	public help(): void {
		if (this.commandExecuted) return;
		const help: HelpCategory = {};
		for (const command of this.commands) {
			const category = command.category;
			if (!help[category]) help[category] = [];
			help[category].push(command);
		}
		let str = "";
		for (const category in help) {
			const categoryName = (
				category.charAt(0).toUpperCase() + category.slice(1)
			).green;
			const commands = help[category]
				.map(
					(command) =>
						`\t${command.name.yellow} ${command.usage.yellow}`,
				)
				.join("\n\t");
			str += `\t${categoryName} Commands:\n\t${"-".repeat(
				categoryName.length + 1,
			)}\n\t${commands}\n\n`;
		}
		console.info(str);
	}
}

const cliTool = new CLITool();

export default cliTool;
