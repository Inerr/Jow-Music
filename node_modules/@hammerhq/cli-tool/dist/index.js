"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const command_line_args_1 = __importDefault(require("command-line-args"));
require("colors");
const [name, ...argv] = process.argv.slice(2);
class CLITool {
    constructor() {
        this.commands = [];
        this.commandExecuted = false;
    }
    handleHelp(command) {
        console.info(`\t${command.name.blue} - Help:\n\t` +
            `${"-".repeat(command.name.length + 9)}\n\t` +
            `${"Command Name".green}: ${command.name.yellow}\n\t` +
            `${"Usage".green}: ${command.name.yellow} ${command.usage.yellow}\n\t` +
            `${"Aliases".green}: ${command.aliases
                .map((alias) => alias.yellow)
                .join(", ")}\n\t` +
            `${"Category".green}: ${command.category.yellow}\n\t` +
            `${"Description".green}: ${command.description.yellow}\n\t` +
            `${"Example".green}:\n\t` +
            `\t${command.example
                .map((example) => `${command.name.blue} ${example.yellow}`)
                .join("\n\t\t")}`);
        return this;
    }
    createCommand(command, fn) {
        command.example.unshift("--help");
        this.commands.push(command);
        command.options.push({
            name: "help",
            alias: "h",
            type: Boolean,
        });
        if (command.name !== name && !command.aliases.includes(name))
            return this;
        if (this.commandExecuted)
            return this;
        this.commandExecuted = true;
        const args = (0, command_line_args_1.default)(command.options, {
            argv,
        });
        if (args.help)
            return this.handleHelp(command);
        fn(args);
        return this;
    }
    help() {
        if (this.commandExecuted)
            return;
        const help = {};
        for (const command of this.commands) {
            const category = command.category;
            if (!help[category])
                help[category] = [];
            help[category].push(command);
        }
        let str = "";
        for (const category in help) {
            const categoryName = (category.charAt(0).toUpperCase() + category.slice(1)).green;
            const commands = help[category]
                .map((command) => `\t${command.name.yellow} ${command.usage.yellow}`)
                .join("\n\t");
            str += `\t${categoryName} Commands:\n\t${"-".repeat(categoryName.length + 1)}\n\t${commands}\n\n`;
        }
        console.info(str);
    }
}
const cliTool = new CLITool();
exports.default = cliTool;
