#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const cli_tool_1 = __importDefault(require("@hammerhq/cli-tool"));
const init_1 = require("./commands/init");
const install_1 = require("./commands/install");
const node_1 = require("./commands/node");
const tidy_1 = require("./commands/tidy");
cli_tool_1.default
    .createCommand({
    name: "init",
    usage: "",
    example: ["--yes"],
    category: "Initialization",
    aliases: ["create", "generate", "new"],
    description: "Creates a new Hammer package.",
    options: [
        {
            name: "yes",
            alias: "y",
            defaultValue: false,
            type: Boolean,
        },
    ],
}, init_1.init)
    .createCommand({
    name: "install",
    usage: "<package_name(s)>",
    example: [
        "TheHammerHQ/hammer-example-package",
        "TheHammerHQ/hammer-example-package TheHammerHQ/another",
    ],
    category: "Package Management",
    aliases: ["i", "add"],
    description: "Installs a package.",
    options: [
        {
            name: "packages",
            type: String,
            multiple: true,
            defaultOption: true,
        },
    ],
}, install_1.install)
    .createCommand({
    name: "tidy",
    usage: "",
    example: [""],
    category: "Package Management",
    aliases: ["t"],
    description: "Installs all packages.",
    options: [],
}, tidy_1.tidy)
    .createCommand({
    name: "node",
    usage: "<package_name(s)>",
    example: ["chalk", "chalk axios"],
    category: "Package Management",
    aliases: ["npm"],
    description: "Adds node packages to the project.",
    options: [
        {
            name: "packages",
            type: String,
            multiple: true,
            defaultOption: true,
        },
    ],
}, node_1.node)
    .help();
