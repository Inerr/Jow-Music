"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.tidy = void 0;
// TODO: Use @hammerhq/logger (hammer_modules) when cli finished
const pogger = __importStar(require("pogger"));
const chalk_1 = __importDefault(require("chalk"));
const utils_1 = require("../../utils");
const toml_1 = require("@iarna/toml");
const fs_1 = require("fs");
const path_1 = require("path");
const utils_2 = require("../../utils");
const tidy = (args) => __awaiter(void 0, void 0, void 0, function* () {
    if (!(0, utils_1.checkIfProjectExists)())
        return;
    (0, utils_1.createModulesFolder)();
    const content = (0, fs_1.readFileSync)((0, path_1.join)(process.cwd(), "hammer.toml"), "utf-8");
    const toml = (0, toml_1.parse)(content);
    const packages = toml.dependencies;
    if (packages && packages.length) {
        pogger.event(`Installing package(s) ${chalk_1.default.yellow(packages.join(", "))}...`);
        const dependencies = [];
        const nodeDepencencies = [];
        for (const pkg of packages)
            yield (0, utils_1.installPackage)(pkg, dependencies, nodeDepencencies, packages);
        if (dependencies.length > 0) {
            pogger.event("Installing dependencies...");
            for (const dependency of dependencies)
                yield (0, utils_1.installPackage)(dependency, dependencies, nodeDepencencies, packages);
            pogger.success("Dependencies installed successfully!");
        }
        pogger.success("Package(s) installed successfully!");
        if (nodeDepencencies.length > 0) {
            pogger.warning(`Some packages needs node dependencies. You have to download them manually. Download these dependencies with your favorite package manager: ${chalk_1.default.yellow(nodeDepencencies.join(", "))}`);
        }
    }
    (0, utils_2.createDeclarationFile)();
    pogger.success("Tidy finished successfully!");
});
exports.tidy = tidy;
