"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.init = void 0;
// TODO: Use @hammerhq/logger (hammer_modules) when cli finished
const pogger = __importStar(require("pogger"));
const toml_1 = require("@iarna/toml");
const utils_1 = require("../../utils");
const semver_1 = require("semver");
const fs_1 = require("fs");
const chalk_1 = __importDefault(require("chalk"));
const path_1 = require("path");
const utils_2 = require("../../utils");
const author = {
    name: "John Doe",
    email: "hi@example.com",
    url: "https://example.com",
};
const defaultHammerTOML = {
    name: "hammer-package",
    description: "A Hammer package",
    version: "0.0.1",
    license: "MIT",
    author,
    contributors: [author],
    dependencies: [],
    node_dependencies: [],
};
const init = (args) => __awaiter(void 0, void 0, void 0, function* () {
    const isExists = (0, fs_1.existsSync)((0, path_1.join)(process.cwd(), "hammer.toml"));
    if (isExists) {
        pogger.error(`There is already a Hammer project created here. ${chalk_1.default.red("Delete hammer.toml")} to continue.`);
        return;
    }
    const { yes } = args;
    if (yes) {
        pogger.warning(`${chalk_1.default.yellow("--yes flag is used")}. This will create a hammer.toml file with default values wich is ${chalk_1.default.yellow("not recommended")}. Use init command without --yes flag to create a better hammer.toml file.`);
    }
    pogger.event("Creating new Hammer package...");
    if (!yes) {
        const name = yield (0, utils_1.waitUntilGetAnswer)("What's your name?");
        const email = yield (0, utils_1.waitUntilGetAnswer)("What's your email?");
        const url = yield (0, utils_1.waitUntilGetAnswer)("What's your website (use Github url if you don't have any)?");
        defaultHammerTOML.author = {
            email,
            name,
            url,
        };
        defaultHammerTOML.contributors = [defaultHammerTOML.author];
        const packageName = yield (0, utils_1.input)("What's your package's name (default: hammer-package)?");
        if (packageName)
            defaultHammerTOML.name = packageName;
        const description = yield (0, utils_1.input)("What does your package do (default: A Hammer package)?");
        if (description)
            defaultHammerTOML.description = description;
        const version = yield (0, utils_1.input)("What's your package's version (default: 0.0.1)?");
        if (version) {
            if (!(0, semver_1.valid)(version)) {
                pogger.error("Invalid version number, aborting...");
                return;
            }
            defaultHammerTOML.version = (0, semver_1.clean)(version);
        }
        const license = yield (0, utils_1.input)("What's your package's version (default: MIT)?");
        if (license)
            defaultHammerTOML.license = license;
    }
    const tomlString = (0, toml_1.stringify)(defaultHammerTOML);
    (0, fs_1.writeFileSync)((0, path_1.join)(process.cwd(), "hammer.toml"), tomlString);
    (0, utils_1.createMainFile)();
    (0, utils_2.createDeclarationFile)();
    pogger.success(`Hammer package created successfully! Created ${chalk_1.default.green("hammer.toml")} (package information file) and ${chalk_1.default.green("hammer/main.js")} (main entry file of your package) for you to start creating your package!`);
});
exports.init = init;
