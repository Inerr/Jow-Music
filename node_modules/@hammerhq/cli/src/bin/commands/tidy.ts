// TODO: Use @hammerhq/logger (hammer_modules) when cli finished
import * as pogger from "pogger";
import { AnyObject } from "@hammerhq/cli-tool/dist";
import chalk from "chalk";
import {
	checkIfProjectExists,
	createModulesFolder,
	installPackage,
} from "../../utils";
import { parse } from "@iarna/toml";
import { readFileSync } from "fs";
import { join } from "path";
import { createDeclarationFile } from "../../utils";

export const tidy = async (args: AnyObject) => {
	if (!checkIfProjectExists()) return;
	createModulesFolder();

	const content = readFileSync(join(process.cwd(), "hammer.toml"), "utf-8");
	const toml = parse(content);
	const packages = toml.dependencies as string[];

	if (packages && packages.length) {
		pogger.event(
			`Installing package(s) ${chalk.yellow(packages.join(", "))}...`,
		);

		const dependencies: string[] = [];
		const nodeDepencencies: string[] = [];

		for (const pkg of packages)
			await installPackage(pkg, dependencies, nodeDepencencies, packages);

		if (dependencies.length > 0) {
			pogger.event("Installing dependencies...");

			for (const dependency of dependencies)
				await installPackage(
					dependency,
					dependencies,
					nodeDepencencies,
					packages,
				);

			pogger.success("Dependencies installed successfully!");
		}

		pogger.success("Package(s) installed successfully!");

		if (nodeDepencencies.length > 0) {
			pogger.warning(
				`Some packages needs node dependencies. You have to download them manually. Download these dependencies with your favorite package manager: ${chalk.yellow(
					nodeDepencencies.join(", "),
				)}`,
			);
		}
	}

	createDeclarationFile();

	pogger.success("Tidy finished successfully!");
};
