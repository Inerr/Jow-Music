// TODO: Use @hammerhq/logger (hammer_modules) when cli finished
import * as pogger from "pogger";
import { AnyObject } from "@hammerhq/cli-tool/dist";
import {
	checkIfProjectExists,
	createModulesFolder,
	installPackage,
} from "../../utils";
import chalk from "chalk";
import { readFileSync, writeFileSync } from "fs";
import { join } from "path";
import { parse, stringify } from "@iarna/toml";
import { createDeclarationFile } from "../../utils";

export const install = async (args: AnyObject) => {
	if (!checkIfProjectExists()) return;
	createModulesFolder();

	const { packages } = args;
	if (!packages) {
		pogger.error("Please specify a package name.");
		return;
	}

	pogger.event(
		`Installing package(s) ${chalk.yellow(packages.join(", "))}...`,
	);

	const dependencies: string[] = [];
	const nodeDepencencies: string[] = [];

	for (const pkg of packages)
		await installPackage(pkg, dependencies, nodeDepencencies, packages);

	if (dependencies.length > 0) {
		pogger.event("Installing dependencies...");

		for (const dependency of dependencies)
			await installPackage(
				dependency,
				dependencies,
				nodeDepencencies,
				packages,
			);

		pogger.success("Dependencies installed successfully!");
	}

	let content = readFileSync(join(process.cwd(), "hammer.toml"), "utf-8");
	const toml = parse(content);

	toml.dependencies = toml.dependencies || [];
	for (const pkg of packages) {
		if (!(toml.dependencies as string[]).includes(pkg))
			(toml.dependencies as string[]).push(pkg);
	}

	content = stringify(toml);
	writeFileSync(join(process.cwd(), "hammer.toml"), content);

	createDeclarationFile();

	pogger.success("Package(s) installed successfully!");

	if (nodeDepencencies.length > 0) {
		pogger.warning(
			`Some packages needs node dependencies. You have to download them manually. Download these dependencies with your favorite package manager: ${chalk.yellow(
				nodeDepencencies.join(", "),
			)}`,
		);
	}
};
