// TODO: Use @hammerhq/logger (hammer_modules) when cli finished
import * as pogger from "pogger";
import { AnyObject } from "@hammerhq/cli-tool";
import { stringify } from "@iarna/toml";
import { createMainFile, input, waitUntilGetAnswer } from "../../utils";
import { valid, clean } from "semver";
import { existsSync, writeFileSync } from "fs";
import chalk from "chalk";
import { join } from "path";
import { createDeclarationFile } from "../../utils";

const author = {
	name: "John Doe",
	email: "hi@example.com",
	url: "https://example.com",
};

const defaultHammerTOML = {
	name: "hammer-package",
	description: "A Hammer package",
	version: "0.0.1",
	license: "MIT",
	author,
	contributors: [author],
	dependencies: [],
	node_dependencies: [],
};

export const init = async (args: AnyObject) => {
	const isExists = existsSync(join(process.cwd(), "hammer.toml"));
	if (isExists) {
		pogger.error(
			`There is already a Hammer project created here. ${chalk.red(
				"Delete hammer.toml",
			)} to continue.`,
		);
		return;
	}

	const { yes } = args;
	if (yes) {
		pogger.warning(
			`${chalk.yellow(
				"--yes flag is used",
			)}. This will create a hammer.toml file with default values wich is ${chalk.yellow(
				"not recommended",
			)}. Use init command without --yes flag to create a better hammer.toml file.`,
		);
	}

	pogger.event("Creating new Hammer package...");

	if (!yes) {
		const name = await waitUntilGetAnswer("What's your name?");
		const email = await waitUntilGetAnswer("What's your email?");
		const url = await waitUntilGetAnswer(
			"What's your website (use Github url if you don't have any)?",
		);
		defaultHammerTOML.author = {
			email,
			name,
			url,
		};
		defaultHammerTOML.contributors = [defaultHammerTOML.author];

		const packageName = await input(
			"What's your package's name (default: hammer-package)?",
		);
		if (packageName) defaultHammerTOML.name = packageName;

		const description = await input(
			"What does your package do (default: A Hammer package)?",
		);
		if (description) defaultHammerTOML.description = description;

		const version = await input(
			"What's your package's version (default: 0.0.1)?",
		);
		if (version) {
			if (!valid(version)) {
				pogger.error("Invalid version number, aborting...");
				return;
			}
			defaultHammerTOML.version = clean(version) as string;
		}

		const license = await input(
			"What's your package's version (default: MIT)?",
		);
		if (license) defaultHammerTOML.license = license;
	}

	const tomlString = stringify(defaultHammerTOML);
	writeFileSync(join(process.cwd(), "hammer.toml"), tomlString);

	createMainFile();

	createDeclarationFile();

	pogger.success(
		`Hammer package created successfully! Created ${chalk.green(
			"hammer.toml",
		)} (package information file) and ${chalk.green(
			"hammer/main.js",
		)} (main entry file of your package) for you to start creating your package!`,
	);
};
